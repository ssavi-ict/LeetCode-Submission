{"id":768622719,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1659980867,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/768622719/","is_pending":"Not Pending","title":"Binary Tree Vertical Order Traversal","memory":"12.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    vector< pair<int, int> >mapped[101];\n    \n    int mx, mn, mxDepth;\n    void solve(TreeNode *root, int lvl, int depth){\n        if(!root) return;\n        \n        mx = max(mx, lvl); \n        mn = min(mn, lvl);\n        mxDepth = max(mxDepth, depth);\n        mapped[depth].push_back(make_pair(root->val, lvl));\n        \n        if(root->left){\n            solve(root->left, lvl-1, depth+1);\n        }\n        if(root->right){\n            solve(root->right, lvl+1, depth+1);\n        }\n    }\n    \n    vector<vector<int>> verticalOrder(TreeNode* root) {\n        \n        mx = -101, mn = 101, mxDepth = -1;\n        solve(root, 0, 0);\n        vector< vector<int>>ans;\n        if(root){\n            int offset = -mn;\n            ans.resize(-mn+mx+1);\n            for(int i=0; i<=mxDepth; i++){\n                for(int j=0; j<mapped[i].size(); j++){\n                    int node = mapped[i][j].first, val = mapped[i][j].second;\n                    ans[val+offset].push_back(node);\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n/*\n\nroot(3, 0, mapped) => mapped[0] = {3, 0} | mx = 0, mn = 0\nleft-> (9, -1, mapped) => mapped[1] = {9, -1} | mx = 0, mn = -1\nleft-> (4, -2, mapped) => mapped[2] = {4, -2} | mx = 0, mn = -2\nright->(0, 0, mapped) => mapped[3] = {0, 0} | mx = 0, mn = -2\nright->(8, 1, mapped) => mapped[4] = {8, 1} | mx = 1, mn = -2\nleft->(1, 0, mapped) => mapped[5] = {1, 0} | mx = 1, mn = -2\nright->(7, 2, mapped) => mapped[6] = {7, 2} | mx = 2, mn = -2\n\noffset = -(-2) = 2\nans[2] = {3, 0, 1}\nans[1] = {9}\nans[0] = {4}\nans[3] = {8}\nans[4] = {7}\n\n*/\n\n\n\n\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-vertical-order-traversal","has_notes":false,"notes":"","topic_tags":[]}