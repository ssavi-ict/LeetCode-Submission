{"id":841761501,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1668231116,"status":10,"status_display":"Accepted","runtime":"316 ms","url":"/submissions/detail/841761501/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"117 MB","code":"class MedianFinder {\npublic:\n    priority_queue<int>first_half;\n    priority_queue<int, vector<int>, greater<int>>second_half;\n\n    MedianFinder() {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n    }\n    \n    void addNum(int num) {\n        first_half.push(num);\n        int fqsize = first_half.size(), sqsize = second_half.size();\n        int total = fqsize + sqsize;\n        while((fqsize - sqsize) != ((total) & 1) && fqsize >= sqsize){\n            second_half.push(first_half.top()); first_half.pop();\n            fqsize = first_half.size(), sqsize = second_half.size();\n        }\n        if(fqsize && sqsize){\n            int ftop = first_half.top(), stop = second_half.top();\n            if(ftop > stop){\n                first_half.pop(), second_half.pop();\n                first_half.push(stop), second_half.push(ftop);\n            }\n        }\n    }\n    \n    double findMedian() {\n        int fqsize = first_half.size(), sqsize = second_half.size();\n        if((fqsize + sqsize) & 1) return first_half.top() * 1.0;\n        else{\n            double sum = first_half.top() * 1.0 + second_half.top() * 1.0;\n            return sum / 2.0;\n        }\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"notes":"","topic_tags":[]}