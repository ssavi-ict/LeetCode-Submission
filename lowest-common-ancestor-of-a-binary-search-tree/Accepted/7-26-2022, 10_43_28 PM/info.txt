{"id":757378615,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1658853808,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/757378615/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(!root || root==p || root==q) return root;\n        TreeNode * lSide = lowestCommonAncestor(root->left, p, q);\n        TreeNode * rSide = lowestCommonAncestor(root->right, p, q);\n        if(lSide && rSide) return root;\n        if(lSide) return lSide;\n        return rSide;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"notes":"","topic_tags":[]}