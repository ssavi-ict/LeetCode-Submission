{"id":705543465,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1653320342,"status":10,"status_display":"Accepted","runtime":"662 ms","url":"/submissions/detail/705543465/","is_pending":"Not Pending","title":"Ones and Zeroes","memory":"35.6 MB","code":"class Solution {\npublic:\n    int dp[601][101][101];\n    int zeroes[601], ones[601];\n    \n    int solve(int pos, int zero, int one, int m, int n, int sz){\n        if(pos >= sz) return 0;\n        if(dp[pos][zero][one]!=-1) return dp[pos][zero][one];\n        int mxV = 0;\n        if(zero+zeroes[pos] <= m && one+ones[pos]<=n){\n            mxV = max(mxV, 1+solve(pos+1, zeroes[pos]+zero, ones[pos]+one, m, n, sz));\n        }\n        mxV = max(mxV, solve(pos+1, zero, one, m, n, sz));\n        return (dp[pos][zero][one] = mxV);\n    }\n    \n    int findMaxForm(vector<string>& strs, int m, int n) {\n        memset(dp, -1, sizeof(dp));\n        for(int i=0; i<strs.size(); i++){\n            for(int j=0; j<strs[i].size(); j++){\n                if(strs[i][j] == '0') zeroes[i]++;\n                else ones[i]++;\n            }\n        }\n        \n        return solve(0, 0, 0, m, n, strs.size());\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ones-and-zeroes","has_notes":false,"notes":"","topic_tags":[]}