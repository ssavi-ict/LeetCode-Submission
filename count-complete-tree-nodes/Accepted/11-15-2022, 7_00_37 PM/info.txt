{"id":843893111,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1668517237,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/843893111/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"30.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    int getHeight(TreeNode * root){\n        if(!root->left) return 0;\n        return 1 + getHeight(root->left);\n    }\n    bool checkPathExist(TreeNode * root, int leafMid, int height){\n        int lo = 0, hi = (1 << height) - 1;\n        while(height--){\n            int mid = lo + ((hi - lo) >> 1);\n            if(leafMid <= mid){\n                root = root->left;\n                hi = mid - 1;\n            }\n            else{\n                root = root->right;\n                lo = mid + 1;\n            }\n        }\n        return root != NULL;\n    }\n\n    int countNodes(TreeNode* root) {\n        if(!root) return 0;\n        int height = getHeight (root);\n        if(height == 0) return 1;\n\n        int leafLeft = 1, leafRight = (1<<height) - 1;\n        while(leafLeft <= leafRight){\n            int leafMid = leafLeft + (leafRight - leafLeft)/2;\n            if(checkPathExist(root, leafMid, height)) leafLeft = leafMid + 1;\n            else leafRight = leafMid - 1;\n        }\n\n        return (1 << height) + (leafLeft - 1);\n    }\n};","compare_result":"111111111111111111","title_slug":"count-complete-tree-nodes","has_notes":false,"notes":"","topic_tags":[]}