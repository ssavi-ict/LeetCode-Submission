{"id":668297213,"lang":"cpp","lang_name":"C++","time":"9Â months","timestamp":1648386783,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/668297213/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode *curNode = head;\n        ListNode *slow = head;\n        ListNode *fast = head;\n        bool cycleFound = false;\n        \n        while(slow && fast && fast->next){\n            slow = slow->next;\n            fast = (fast->next)->next;\n            if(slow == fast){\n                cycleFound = true;\n                break;\n            }\n        }\n        \n        if(!cycleFound)\n            return NULL;\n        \n        while(curNode && curNode != slow){\n            curNode = curNode->next;\n            slow = slow->next;\n        }\n        \n        return curNode;\n    }\n};","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"notes":"","topic_tags":[]}