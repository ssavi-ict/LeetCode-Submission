{"id":687961891,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1650989735,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/687961891/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"N/A","code":"class Solution {\npublic:\n    int getWeight(vector<int>& startPoint, vector<int>& endPoint) {\n        return abs(startPoint[0]-endPoint[0]) +\n            abs(startPoint[1] - endPoint[1]);\n    }\n    int minCostConnectPoints(vector<vector<int>>& points) {\n        \n        int n = points.size();\n        int totalCost = 0;\n        \n        map<int, bool> visited;\n        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> heap;\n        heap.push({0,0});\n        \n        while(visited.size() != n) {\n            pair<int,int> topElement = heap.top();\n            heap.pop();\n            \n            int currNode = topElement.first;\n            int weight = topElement.second;\n            \n            if(visited.count(currNode))\n                continue;\n            \n            totalCost += weight;\n            visited[currNode] = true;\n            for(int nextNode = 0; nextNode < n; ++nextNode) {\n                if(visited.count(nextNode))\n                    continue;\n                int nextWeight = getWeight(points[currNode], points[nextNode]);\n                heap.push({nextNode, nextWeight});\n            }\n        }\n        return totalCost;\n        \n    }\n};","compare_result":"110111000000000000000000000000000000000000000000000000000000000000000000","title_slug":"min-cost-to-connect-all-points","has_notes":false,"notes":"","topic_tags":[]}