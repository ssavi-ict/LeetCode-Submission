{"id":833147069,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1667105823,"status":10,"status_display":"Accepted","runtime":"73 ms","url":"/submissions/detail/833147069/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"22.5 MB","code":"class Solution {\npublic:\n    int dx[8] = {0, 1, 0, -1, 1, -1, 1, -1};\n    int dy[8] = {1, 0, -1, 0, 1, 1, -1, -1};\n\n    bool isValid(int u, int v, int n){\n        if(u>=0 && u<n && v>=0 && v<n) return true;\n        return false;\n    }\n\n    void getDistance(vector<vector<int>> & matrix, vector<vector<int>> & distance, int n){\n        distance[0][0] = 1;\n        queue<pair<int, int>>myQ;\n        myQ.push(make_pair(0, 0));\n        while(!myQ.empty()){\n            auto top = myQ.front();\n            myQ.pop();\n            for(int i=0; i<8; i++){\n                int u = top.first + dx[i];\n                int v = top.second + dy[i];\n                if(isValid(u, v, n) && matrix[u][v] == 0 && distance[u][v] > distance[top.first][top.second] + 1){\n                    distance[u][v] = distance[top.first][top.second] + 1;\n                    myQ.push(make_pair(u,v));\n                }\n            }\n        }\n    }\n\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<vector<int>>matrix(n, vector<int>(n, 0));\n        for(int i=0; i<n; i++){\n            for(int j=0; j<n; j++){\n                matrix[i][j] = grid[i][j];\n            }\n        }\n        if(grid[0][0]) return -1;\n        vector<vector<int>>distance(n, vector<int>(n, INT_MAX));\n        getDistance(grid, distance, n);\n        return (distance[n-1][n-1] < INT_MAX) ? distance[n-1][n-1] : -1 ;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false,"notes":"","topic_tags":[]}