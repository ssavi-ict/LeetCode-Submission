{"id":808043731,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1664082800,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/808043731/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"17.1 MB","code":"class MyCircularQueue {\npublic:\n    \n    int totalNode, currentNode;\n    struct ListNode{\n        int val;\n        ListNode * next, * prev;\n        ListNode(int x) : val(x), next(NULL), prev(NULL){}\n    };\n    \n    ListNode * head,* tail;\n    \n    MyCircularQueue(int k) {\n        totalNode = k;\n        currentNode = 0;\n    }\n    \n    bool enQueue(int value) {\n        if(currentNode == totalNode) return false;\n        if(currentNode == 0){\n            head = new ListNode(value);\n            tail = head;\n        }\n        else{\n            ListNode * newNode = new ListNode(value);\n            tail->next = newNode;\n            newNode->prev = tail;\n            tail = tail->next;\n            tail->next = head;\n            head->prev = tail;\n        }\n        currentNode++;\n        return true;\n    }\n    \n    bool deQueue() {\n        if(currentNode == 0) return false;\n        \n        if(currentNode == 1){\n            head = head->next;\n            tail = head;\n        }\n        else{\n            head = head->next;\n            head->prev = tail;\n            tail->next = head;\n        }\n        currentNode--;\n        return true;\n    }\n    \n    int Front() {\n        if(currentNode == 0) return -1;\n        return head->val;\n    }\n    \n    int Rear() {\n        if(currentNode == 0) return -1;\n        return tail->val;\n    }\n    \n    bool isEmpty() {\n        return currentNode == 0;\n    }\n    \n    bool isFull() {\n        return currentNode == totalNode;\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue","has_notes":false,"notes":"","topic_tags":[]}