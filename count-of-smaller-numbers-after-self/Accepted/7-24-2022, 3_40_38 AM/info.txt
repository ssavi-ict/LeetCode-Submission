{"id":754874727,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1658612438,"status":10,"status_display":"Accepted","runtime":"636 ms","url":"/submissions/detail/754874727/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"209.1 MB","code":"class Solution {\npublic:\n    struct info{\n        int val, idx;\n    };\n    \n    void merge(vector<info>&nums, int L, int M, int R, vector<int>&ans){\n        vector<info>ret(R-L+1);\n        int l = L, k = 0, r = M+1;\n        int small = 0;\n        // cout<<\"j\"<<endl;\n        while(l<=M && r<=R){\n            if(nums[l].val <= nums[r].val){\n                ans[nums[l].idx] += small;\n                ret[k] = nums[l];\n                k++; l++;\n            }\n            else{\n                small++;\n                ret[k] = nums[r];\n                r++; k++;\n            }\n        }\n        \n        while(l<=M){\n            ans[nums[l].idx] += small;\n            ret[k] = nums[l];\n            k++; l++;\n        }\n        \n        while(r<=R){\n            ret[k] = nums[r];\n            r++; k++;\n        }\n        \n        l = L; k = 0;\n        while(l<=R){\n            nums[l++] = ret[k++];\n        }\n    }\n    \n    void mergeSort(vector<info>&nums, int start, int end, vector<int>&ans){\n        if(start < end){\n            int mid = (start + end)/2;\n            mergeSort(nums, start, mid, ans);\n            mergeSort(nums, mid+1, end, ans);\n            merge(nums, start, mid, end, ans);\n        }\n    }\n    \n    vector<int> countSmaller(vector<int>& nums) {\n        vector<info>myvector(size(nums));\n        for(int i=0; i<size(nums); i++){\n            myvector[i] = {nums[i], i};\n        }\n        \n        vector<int>ans(size(nums), 0);\n        mergeSort(myvector, 0, size(nums)-1, ans);\n        \n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-smaller-numbers-after-self","has_notes":false,"notes":"","topic_tags":[]}