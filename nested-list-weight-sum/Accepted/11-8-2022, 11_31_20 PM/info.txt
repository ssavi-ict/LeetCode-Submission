{"id":839566614,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1667928680,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/839566614/","is_pending":"Not Pending","title":"Nested List Weight Sum","memory":"9.4 MB","code":"class Solution {\npublic:\n    int depthSum(vector<NestedInteger>& nestedList) {\n        queue<NestedInteger>listQueue;\n        for(auto item: nestedList){\n            listQueue.push(item);\n        }\n\n        int sum = 0, depth = 0;\n        while(!listQueue.empty()){\n            int qSize = listQueue.size();\n            depth++;\n            while(qSize--){\n                NestedInteger queueTop = listQueue.front();\n                listQueue.pop();\n                if(queueTop.isInteger()){\n                    sum += (queueTop.getInteger() * depth);\n                }\n                else{\n                    for(auto item: queueTop.getList()){\n                        if(item.isInteger()){\n                            sum += (item.getInteger() * (depth + 1));\n                        }\n                        else{\n                            listQueue.push(item);\n                        }\n                    }\n                }\n            }\n        }\n        return sum;\n    }\n};\n\n\n\n\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     void add(const NestedInteger &ni);\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\n","compare_result":"1111111111111111111111111","title_slug":"nested-list-weight-sum","has_notes":false,"notes":"","topic_tags":[]}