{"id":849382729,"lang":"cpp","lang_name":"C++","time":"4 weeks, 1 day","timestamp":1669339690,"status":10,"status_display":"Accepted","runtime":"257 ms","url":"/submissions/detail/849382729/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"42.9 MB","code":"class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    int sumSubarrayMins(vector<int>& arr) {\n        \n        int n = arr.size();\n        \n        vector<int> left(n,-1), right(n,n);\n        // for every i find the Next smaller element to left and right\n        \n        // Left\n        stack<int> st;\n        for(int i=0; i<n; i++)\n        {\n            while(st.size() && arr[i] < arr[st.top()]) st.pop();\n            if(st.size()) left[i] = i - st.top();\n            else left[i] = i+1;\n            st.push(i);\n        }\n        \n        while(st.size()) st.pop();\n        \n        // Right\n        for(int i=n-1; i>=0; i--)\n        {\n            while(st.size() && arr[i] <= arr[st.top()]) st.pop();\n            if(st.size()) right[i] = st.top() - i;\n            else right[i] = n - i;\n            st.push(i);\n        }\n        \n        // for(int i=0; i<n; i++) cout << left[i] << \" : \" << right[i] << endl;\n        \n        // for each i, contribution is (Left * Right) * Element \n        \n        int res = 0;\n        for(int i=0; i<n; i++)\n        {\n            long long prod = (left[i]*right[i])%MOD;\n            prod = (prod*arr[i])%MOD;\n            res = (res + prod)%MOD;\n        }\n        \n        return res%MOD;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-subarray-minimums","has_notes":false,"notes":"","topic_tags":[]}