{"id":771512965,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1660268231,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/771512965/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    \n    unordered_map<TreeNode*, bool>mymap;\n    \n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode * cur = root;\n        while(cur!=p){\n            mymap[cur] = true;\n            cur = (p->val < cur->val) ? cur->left : cur->right;\n        }\n        mymap[cur] = true;\n        \n        cur = root;\n        TreeNode * ans = root;\n        while(cur!=q){\n            if(mymap[cur]) ans = cur;\n            cur = (q->val < cur->val) ? cur->left : cur->right;\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111101110111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"notes":"","topic_tags":[]}