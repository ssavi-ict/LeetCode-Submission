{"id":856390133,"lang":"cpp","lang_name":"C++","time":"2 weeks, 2 days","timestamp":1670465657,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/856390133/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"13 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    void traverse(TreeNode * root, vector<int> & ints){\n        if(root->left == NULL && root->right == NULL){\n            ints.push_back(root->val);\n            return;\n        }\n        if(root->left) traverse(root->left, ints);\n        if(root->right) traverse(root->right, ints);\n    }\n\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        vector<int>leaf_one, leaf_two;\n        traverse(root1, leaf_one);\n        traverse(root2, leaf_two);\n        return leaf_one == leaf_two;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"notes":"","topic_tags":[]}