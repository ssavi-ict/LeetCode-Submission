{"id":837212131,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1667633716,"status":10,"status_display":"Accepted","runtime":"903 ms","url":"/submissions/detail/837212131/","is_pending":"Not Pending","title":"Word Search II","memory":"15.2 MB","code":"class Solution {\npublic:\n    \n    struct TrieNode{\n        struct TrieNode * child[26];\n        string word;\n    };\n    \n    struct TrieNode * getNode(){\n        struct TrieNode * newNode = new TrieNode;\n        newNode->word = \"\";\n        for(int i=0; i<26; i++){\n            newNode->child[i] = NULL;\n        }\n        return newNode;\n    }\n    \n    int dx[4] = {-1, 1, 0, 0};\n    int dy[4] = {0, 0, 1, -1};\n    \n    void insertWord(struct TrieNode * root, string & word){\n        int word_size = word.size();\n        struct TrieNode * currentNode = root;\n        for(int i=0; i<word_size; i++){\n            int index = word[i] - 'a';\n            if(currentNode->child[index] == NULL){\n                currentNode->child[index] = getNode();\n            }\n            currentNode = currentNode->child[index];\n        }\n        currentNode->word = word;\n    }\n    \n    void wordFinder(int x, int y, int m, int n, vector<vector<char>>& board, struct TrieNode * currentNode, vector<string> & retWords){\n        char current_ch = board[x][y];\n        if(current_ch == '#')  return;\n        int index = current_ch - 'a';\n        currentNode = currentNode->child[index];\n        if(currentNode == NULL) return;\n        \n        if(currentNode->word.size() > 0){\n            retWords.push_back(currentNode->word);\n            currentNode->word = \"\";\n        }\n        \n        board[x][y] = '#';\n        for(int i=0; i<4; i++){\n            int new_x = x + dx[i];\n            int new_y = y + dy[i];\n            if(new_x<0 || new_x>=m || new_y<0 || new_y>=n) continue;\n            wordFinder(new_x, new_y, m, n, board, currentNode, retWords);\n        }\n        board[x][y] = current_ch;\n    }\n    \n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        TrieNode * root = getNode();\n        int word_size = words.size();\n        for(auto word: words){\n            insertWord(root, word);\n        }\n        \n        vector<string>retWords;\n        int m = board.size(), n = board[0].size();\n        for(int i=0; i<m; i++){\n            for(int j=0; j<n; j++){\n                wordFinder(i, j, m, n, board, root, retWords);\n            }\n        }\n        return retWords;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"notes":"","topic_tags":[]}