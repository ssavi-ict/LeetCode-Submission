{"id":843416424,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1668449612,"status":10,"status_display":"Accepted","runtime":"465 ms","url":"/submissions/detail/843416424/","is_pending":"Not Pending","title":"Most Stones Removed with Same Row or Column","memory":"14.3 MB","code":"class Solution {\npublic:\n\n    int findParent(int stone, vector<int> & parentStone){\n        if(parentStone[stone] == stone) return stone;\n        return parentStone[stone] = findParent(parentStone[stone], parentStone);\n    }\n\n    void makeUnion(int stone_a, int stone_b, vector<int> & parentStone, int & counter){\n        int parent_a = findParent(stone_a, parentStone);\n        int parent_b = findParent(stone_b, parentStone);\n        if(parent_a != parent_b){\n            parentStone[parent_b] = parent_a; \n            counter++;\n        }\n    }\n\n    int removeStones(vector<vector<int>>& stones) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n\n        int n = stones.size();\n        vector<int>parentStone(n);\n        for(int i=0; i<n; i++) parentStone[i] = i;\n\n        int counter = 0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<n && i!=j; j++){\n                if(stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]){\n                    makeUnion(i, j, parentStone, counter);\n                }\n            }\n        }\n        return counter;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"most-stones-removed-with-same-row-or-column","has_notes":false,"notes":"","topic_tags":[]}