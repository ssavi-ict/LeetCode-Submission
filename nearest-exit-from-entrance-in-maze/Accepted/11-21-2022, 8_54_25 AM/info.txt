{"id":847208025,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1668999265,"status":10,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/847208025/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"29.8 MB","code":"class Solution {\npublic:\n\n    int dx[4] = {0, 0, -1, 1};\n    int dy[4] = {1, -1, 0, 0};\n    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {\n        int m = maze.size(), n = maze[0].size();\n        int steps = 0;\n\n        maze[entrance[0]][entrance[1]] = '+';\n        queue<pair<int, int>>mazeQueue;\n        mazeQueue.push(make_pair(entrance[0], entrance[1]));\n        bool fromEntrance = true;\n\n        while(!mazeQueue.empty()){\n            int q_size = mazeQueue.size();\n            while(q_size--){\n                auto topQcell = mazeQueue.front();\n                mazeQueue.pop();\n                for(int i=0; i<4; i++){\n                    int adj_x = topQcell.first + dx[i];\n                    int adj_y = topQcell.second + dy[i];\n                    if(adj_x < 0 || adj_y< 0 || adj_x>=m || adj_y>=n){\n                        if(fromEntrance) continue;\n                        return steps;\n                    }\n                    if(maze[adj_x][adj_y] == '.'){\n                        maze[adj_x][adj_y] = '+';\n                        mazeQueue.push(make_pair(adj_x, adj_y));\n                    }\n                }\n                fromEntrance = false;\n            }\n            steps++;\n        }\n        return -1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"nearest-exit-from-entrance-in-maze","has_notes":false,"notes":"","topic_tags":[]}