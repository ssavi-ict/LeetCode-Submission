{"id":743908054,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1657509962,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/743908054/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"12 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    void solve(TreeNode * root, vector<int>&ans, int lvl){\n        if(root == NULL) return;\n        ans[lvl] = root->val;\n        if(root->left){\n            solve(root->left, ans, lvl+1);\n        }\n        if(root->right){\n            solve(root->right, ans, lvl+1);\n        }\n    }\n    \n    vector<int> rightSideView(TreeNode* root) {\n        vector<int>ans(105, -1);\n        solve(root, ans, 0);\n        for(auto it=ans.begin(); it!=ans.end(); ++it){\n            if(*it==-1){\n                ans.erase(it, ans.end());\n                break;\n            }\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"notes":"","topic_tags":[]}