{"id":657128003,"lang":"cpp","lang_name":"C++","time":"9 months, 2 weeks","timestamp":1646904431,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/657128003/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"12.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* flattenTree(TreeNode* node)\n    {\n        if(node == NULL)\n            return NULL;\n        if(node->left == NULL && node->right == NULL)\n            return node;\n        TreeNode* leftTail = flattenTree(node->left);\n        TreeNode* rightTail = flattenTree(node->right);\n        \n        if(leftTail) {\n            leftTail->right = node->right;\n            node->right = node->left;\n            node->left = NULL;\n        }\n        return rightTail == NULL ? leftTail : rightTail;\n    }\n    \n    void flatten(TreeNode* root) {\n        flattenTree(root);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"notes":"","topic_tags":[]}