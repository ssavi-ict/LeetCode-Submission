{"id":689235910,"lang":"cpp","lang_name":"C++","time":"7 months, 4 weeks","timestamp":1651169271,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/689235910/","is_pending":"Not Pending","title":"Build Binary Expression Tree From Infix Expression","memory":"7.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct Node {\n *     char val;\n *     Node *left;\n *     Node *right;\n *     Node() : val(' '), left(nullptr), right(nullptr) {}\n *     Node(char x) : val(x), left(nullptr), right(nullptr) {}\n *     Node(char x, Node *left, Node *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<char, int> signedPrior;\n    \n    Node* FuN(string &s, int l, int r)\n    {\n        Node* curr = NULL;\n        if(l == r) {\n            curr = new Node(s[l]);\n            return curr;\n        }\n        \n        long long partitionIdx = 1e9, mnPrior = 1e9, openBracket = 0, num = 0;\n        \n        for(int i=l ; i<=r ; i++){\n            if(s[i] >= '0' && s[i] <= '9'){\n                continue;\n            }\n            else if(s[i] == '(')\n                openBracket++;\n            else if(s[i] == ')')\n                openBracket--;\n            else if(!openBracket){\n                if(signedPrior[s[i]] <= mnPrior){\n                    mnPrior = signedPrior[s[i]];\n                    partitionIdx = i;\n                }\n            }\n        }\n        \n        if(mnPrior == 1e9 && s[l] == '(' && s[r] == ')')\n            return FuN(s, l+1, r-1);\n        else{\n            curr = new Node(s[partitionIdx]);\n            curr->left = FuN(s, l, partitionIdx-1);\n            curr->right = FuN(s, partitionIdx+1, r);\n            return curr;\n        }\n    }\n    \n    \n    Node* expTree(string s) {\n        int n = s.size();\n        signedPrior['+'] = 1;\n        signedPrior['-'] = 2;\n        signedPrior['/'] = 3;\n        signedPrior['*'] = 4;\n        return FuN(s, 0, n-1);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"build-binary-expression-tree-from-infix-expression","has_notes":false,"notes":"","topic_tags":[]}