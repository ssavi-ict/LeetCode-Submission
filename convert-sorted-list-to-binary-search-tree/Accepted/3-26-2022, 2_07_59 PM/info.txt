{"id":667492057,"lang":"cpp","lang_name":"C++","time":"9Â months","timestamp":1648282079,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/667492057/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"28.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode *curNode;\n    TreeNode* getBST(int l, int r){\n        if(l > r)\n            return NULL;\n        int mid = (l + r) / 2;\n        TreeNode *left = getBST(l, mid - 1);\n        TreeNode *node = new TreeNode(curNode->val);\n        curNode = curNode->next;\n        node->left = left;\n        node->right = getBST(mid + 1, r);\n        return node;\n    }\n        \n    int getLength(ListNode *node){\n        int length = 0;\n        while(node){\n            length++;\n            node = node->next;\n        }\n        return length;\n    }\n    \npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        curNode = head;\n        return getBST(0, getLength(head) - 1);\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"notes":"","topic_tags":[]}