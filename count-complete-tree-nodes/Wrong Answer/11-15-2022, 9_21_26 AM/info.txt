{"id":843641858,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1668482486,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/843641858/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    int getHeight(TreeNode * root){\n        if(!root->left) return 0;\n        return 1 + getHeight(root->left);\n    }\n\n    vector<int>getPath(int Node){\n        vector<int>path;\n        while(Node){\n            path.emplace_back(Node);\n            Node >>= 1;\n        }\n        return path;\n    }\n\n    bool checkPathExist(TreeNode * root, int leafMid){\n        // cout<<leafMid<<endl;\n        vector<int>trackPath = getPath(leafMid);\n        int startFrom = size(trackPath) - 1;\n        if(root->val != trackPath[startFrom]) return false;\n\n        // for(int i=0; i<=startFrom; i++) cout<<trackPath[i]<<endl;\n\n        while(root && startFrom > 0){\n            // if(root->val != trackPath[startFrom]) return false;\n            // cout<<\"H \"<<trackPath[startFrom - 1]<<endl;\n            if(root->left && (root->left->val == trackPath[startFrom - 1])) root = root->left;\n            else if(root->right && (root->right->val == trackPath[startFrom - 1])) root = root->right;\n            else return false;\n            startFrom--;\n        }\n        // cout<<\"R \"<<leafMid<<endl;\n        return true;\n    }\n\n    int countNodes(TreeNode* root) {\n        if(!root) return 0;\n        int height = getHeight (root);\n        int leafLeft = (1<<height), leafRight = (1 << (height + 1)) - 1;\n        // cout<<leafLeft<<' '<<leafRight<<endl;\n        // int count = height + 1;\n        while(leafLeft <= leafRight){\n            int leafMid = leafLeft + (leafRight - leafLeft)/2;\n            if(checkPathExist(root, leafMid)) leafLeft = leafMid + 1;\n            else leafRight = leafMid - 1;\n        }\n        // if(checkPathExist(root, leafLeft)) return leafLeft;\n        return leafRight;\n    }\n};","compare_result":"111111111111111000","title_slug":"count-complete-tree-nodes","has_notes":false,"notes":"","topic_tags":[]}