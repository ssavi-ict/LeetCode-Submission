{"id":857348367,"lang":"cpp","lang_name":"C++","time":"2Â weeks","timestamp":1670633270,"status":10,"status_display":"Accepted","runtime":"143 ms","url":"/submissions/detail/857348367/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"88.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    long long maxVal = 0;\n\n    long long solve(TreeNode * root, bool type, long long total){\n        if(!root) return 0;\n        long long left = solve(root->left, type, total);\n        long long right = solve(root->right, type, total);\n        if(type){\n            maxVal = max(maxVal, left * (total - left));\n            maxVal = max(maxVal, right * (total - right));\n            long long newSum =(left + right + root->val);\n            maxVal = max(maxVal, newSum * (total - newSum));\n        }\n        return (left + right + root->val); \n    }\n\n    int maxProduct(TreeNode* root) {\n        vector<int>sums;\n        long long total = solve(root, false, 0);\n        solve(root, true, total);\n        return maxVal % MOD;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-splitted-binary-tree","has_notes":false,"notes":"","topic_tags":[]}