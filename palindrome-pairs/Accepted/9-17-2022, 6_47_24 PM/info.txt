{"id":801976485,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1663418844,"status":10,"status_display":"Accepted","runtime":"847 ms","url":"/submissions/detail/801976485/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"604.1 MB","code":"class Solution {\npublic:\n    \n    struct TrieNode{\n        int index;\n        struct TrieNode * next[26];\n    };\n    \n    struct TrieNode * getNode(){\n        struct TrieNode * newNode = new TrieNode;\n        newNode->index = -1;\n        for(int i=0; i<26; i++){\n            newNode->next[i] = NULL;\n        }\n        return newNode;\n    }\n    \n    void insert(string & s, TrieNode * root, int idx){\n        int sz = s.size();\n        struct TrieNode * curr = root;\n        \n        for(int i=sz-1; i>=0; i--){\n            int u = s[i] - 'a';\n            if(curr->next[u] == NULL){\n                curr->next[u] = getNode();\n            }\n            curr = curr->next[u];\n        }\n        curr->index = idx;\n        return;\n    }\n    \n    bool is_pallindrome(string & str, int left, int right){\n        while(left<=right){\n            if(str[left]!=str[right]) return false;\n            left++, right--;\n        }\n        return true;\n    }\n    \n    void find_other_pallindrome(TrieNode * root, vector<int> & list_of_pal, string s = \"\"){\n        \n        if(root->index!=-1){\n            if(is_pallindrome(s, 0, s.size() - 1)){\n                list_of_pal.push_back(root->index);\n            }\n        }\n        \n        for(int i=0; i<26; i++){\n            if(root->next[i]!=NULL){\n                char newChar = i + 'a';\n                s.push_back(newChar);\n                find_other_pallindrome(root->next[i], list_of_pal, s);\n                s.pop_back();\n            }\n        }\n    }\n    \n    vector<int>search(TrieNode * root, string & s){\n        vector<int>list_of_pal;\n        int sz = s.size();\n        struct TrieNode * cur = root;\n        \n        for(int i=0; i<sz; i++){\n            int idx = s[i] - 'a';\n            if(cur->index!=-1){\n                if(is_pallindrome(s, i, sz-1)){\n                    list_of_pal.push_back(cur->index);\n                }\n            }\n            if(cur->next[idx]==NULL){\n                return list_of_pal;\n            }\n            cur = cur->next[idx];\n        }\n        find_other_pallindrome(cur, list_of_pal);\n        return list_of_pal;\n    }\n    \n    vector<vector<int>> palindromePairs(vector<string>& words) {\n        struct TrieNode * root = getNode(); \n        int n = words.size();\n        for(int i=0; i<n; i++) insert(words[i], root, i);\n        \n        vector<vector<int>> ans;\n        for(int i=0; i<n; i++){\n            vector<int>pal_list = search(root, words[i]);\n            for(int j=0; j<pal_list.size(); j++){\n                if(pal_list[j] != i){\n                    ans.push_back({i, pal_list[j]});\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n/*\n\n\"baa\", \"aabbb\", \"aabbaa\", \"baa\"\na->a->b(end)->b->a->a(end)\nb->b->b->a->a\n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs","has_notes":false,"notes":"","topic_tags":[]}