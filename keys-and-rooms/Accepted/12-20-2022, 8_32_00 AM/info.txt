{"id":862424135,"lang":"cpp","lang_name":"C++","time":"4 days, 9 hours","timestamp":1671503520,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/862424135/","is_pending":"Not Pending","title":"Keys and Rooms","memory":"10.5 MB","code":"class Solution {\npublic:\n\n    int visit(int src, vector<vector<int>> & graph, vector<bool> & visited){\n        visited[src] = true;\n        queue<int>node_q; node_q.push(src);\n        int count = 1;\n        \n        while(!node_q.empty()){\n            int top_node = node_q.front();\n            node_q.pop();\n            for(int i=0; i<graph[top_node].size(); i++){\n                int child = graph[top_node][i];\n                if(!visited[child] && child != top_node){\n                    visited[child] = true;\n                    count++;\n                    node_q.push(child);\n                }\n            }\n        }\n        return count;\n    }\n\n    bool canVisitAllRooms(vector<vector<int>>& rooms) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        int n = rooms.size();\n        vector<bool>visited(1001, false);\n        return visit(0, rooms, visited) == n;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"keys-and-rooms","has_notes":false,"notes":"","topic_tags":[]}