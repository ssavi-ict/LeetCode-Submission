{"id":747127917,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1657820769,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/747127917/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"26.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int, int>mymap;\n    int preid = 0;\n    \n    TreeNode * solve(vector<int>&preorder, int start, int end){\n        if(start > end) return nullptr;\n        int value = preorder[preid];\n        TreeNode * node = new TreeNode;\n        node->val = value;\n        preid++;\n        node->left = solve(preorder, start, mymap[value]-1);\n        node->right = solve(preorder, mymap[value]+1, end);\n        return node;\n    }\n    \n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        int inSize = size(inorder);\n        int preSize = size(preorder);\n        for(int i=0; i<inSize; i++){\n            mymap[inorder[i]]= i;\n        }\n        return solve(preorder, 0, preSize-1);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"notes":"","topic_tags":[]}