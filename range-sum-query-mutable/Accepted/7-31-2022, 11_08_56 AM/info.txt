{"id":761213161,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1659244136,"status":10,"status_display":"Accepted","runtime":"826 ms","url":"/submissions/detail/761213161/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"155.1 MB","code":"class NumArray {\npublic:\n    int tree[30000*3];\n    \n    void update(int node, int b, int e, int pos, int val){\n        if(pos>e || pos<b) return;\n        if(b>=pos && e<=pos){\n            tree[node] = val;\n            return;\n        }\n        int left = node * 2;\n        int right = node * 2 + 1;\n        int mid = (b + e) / 2 ;\n        update(left, b, mid, pos, val);\n        update(right, mid+1, e, pos, val);\n        tree[node] = tree[left] + tree[right];\n    }\n    \n    int query(int node, int b, int e, int l, int r){\n        if(r<b || l>e) return 0;\n        if(b>=l && e<=r) return tree[node];\n        int left = node * 2;\n        int right = node * 2 + 1;\n        int mid = (b + e) / 2;\n        int sum = query(left, b, mid, l, r) + query(right, mid+1, e, l, r);\n        return sum;\n    }\n    \n    int N;\n    \n    NumArray(vector<int>& nums) {\n        memset(tree, 0, sizeof(tree));\n        N = size(nums);\n        for(int i=0; i<N; i++){\n            update(1, 1, N, i+1, nums[i]);\n        }\n    }\n    \n    void update(int index, int val) {\n        update(1, 1, N, index+1, val);\n    }\n    \n    int sumRange(int left, int right) {\n        return query(1, 1, N, left+1, right+1);\n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */","compare_result":"111111111111111","title_slug":"range-sum-query-mutable","has_notes":false,"notes":"","topic_tags":[]}