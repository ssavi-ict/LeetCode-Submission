{"id":862422194,"lang":"cpp","lang_name":"C++","time":"4 days, 9 hours","timestamp":1671503144,"status":10,"status_display":"Accepted","runtime":"241 ms","url":"/submissions/detail/862422194/","is_pending":"Not Pending","title":"Keys and Rooms","memory":"419.9 MB","code":"class Solution {\npublic:\n\n    int visit(int src, vector<vector<int>> & graph, vector<bool> & visited){\n        visited[src] = true;\n        int count = 1, child_sz = graph[src].size();\n        for(int i=0; i<child_sz; i++){\n            int next = graph[src][i];\n            if(!visited[next]){\n                count += visit(next, graph, visited);\n            }\n        }\n        return count;\n    }\n\n    bool canVisitAllRooms(vector<vector<int>>& rooms) {\n        vector<vector<int>>graph(1001, vector<int>(1001));\n        int n = rooms.size();\n        for(int i=0; i<n; i++){\n            int rsize = rooms[i].size();\n            for(int j=0; j<rsize; j++){\n                if(i == rooms[i][j]) continue;\n                graph[i].push_back(rooms[i][j]);\n            }\n        }\n        vector<bool>visited(1001, false);\n        \n        return visit(0, graph, visited) == n;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"keys-and-rooms","has_notes":false,"notes":"","topic_tags":[]}