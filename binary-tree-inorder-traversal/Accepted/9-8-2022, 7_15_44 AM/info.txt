{"id":794321617,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1662599744,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/794321617/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"8.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    vector<int> inorderTraversal(TreeNode* root) {\n        stack<TreeNode *>mystack;\n        \n        while(root){\n            mystack.push(root);\n            root = root->left;\n        }\n        \n        vector<int>ans;\n        while(mystack.size() > 0){\n            TreeNode *current = mystack.top();\n            mystack.pop();\n            ans.push_back(current->val);\n            if(current->right){\n                TreeNode * go_left = current->right;\n                while(go_left){\n                    mystack.push(go_left);\n                    go_left = go_left->left;\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n/*\n\nstack = 2, 3\nans = 5, 1, 3 2\n\n*/","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"notes":"","topic_tags":[]}