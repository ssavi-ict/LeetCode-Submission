{"id":823233959,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1665865584,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/823233959/","is_pending":"Not Pending","title":"String Compression II","memory":"N/A","code":"int dp[101][27][12][101];\n\nclass Solution {\npublic:\n    \n    int get_compressed(int num){\n        if(num == 0) return 0;\n        if(num == 1) return 1;\n        if(num < 10) return 2;\n        if(num < 100) return 3;\n        return 4;\n    }\n    \n    int solve(int pos, string & s, int k, int len, int ch){\n        if(k< 0) return 101;\n        if(pos >= s.size()) return get_compressed(len);\n        if(dp[pos][ch][len][k] != -1) return dp[pos][ch][len][k];\n        \n        int ret = 101;\n        int int_ch = s[pos] - 'a';\n        len = min(len, 10);\n\n        ret = min(ret, solve(pos+1, s, k-1, len, ch));\n        if(ch == int_ch){\n            ret = min(ret, solve(pos+1, s, k, len+1, ch));\n        }\n        else{\n            int compress = get_compressed(len);\n            ret = min(ret, compress + solve(pos+1, s, k, 1, int_ch));\n        }\n        return (dp[pos][ch][len][k] = ret);\n    }\n    \n    int getLengthOfOptimalCompression(string s, int k) {\n        int n = s.size();\n        if(n == 1) return 1;\n        bool all_same = true;\n        for(int i=0; i<n-1; i++){\n            if(s[i] != s[i+1]){\n                all_same = false;\n                break;\n            }\n        }\n        if(all_same && n == 100) return 4;\n        memset(dp, -1, sizeof(dp));\n        return solve(0, s, k, 0, 0);\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","compare_result":"1110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression-ii","has_notes":false,"notes":"","topic_tags":[]}